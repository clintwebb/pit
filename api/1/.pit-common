#!/bin/bash
#
# PIT Backend API Script
# https://github.com/hyper/pit
#
# Common functionality shared by the various operations
#
# CGI Framework based from https://github.com/ruudud/cgi
#

#-----------------------------------------------------
# Parameter Parsing

declare -A GET_PARAMS
declare -A POST_PARAMS

read_POST_vars() {
  if [[ "$REQUEST_METHOD" = "POST" ]] && [[ ! -z "$CONTENT_LENGTH" ]]; then
    QUERY_STRING_POST=$(dd bs="${CONTENT_LENGTH}" count=1 status=none)
  fi
}

parse_POST_params() {
    saveIFS=$IFS
    IFS='=&'
    parm=($QUERY_STRING_POST)
    IFS=$saveIFS
    for ((i=0; i<${#parm[@]}; i+=2))
    do
        POST_PARAMS[${parm[i]}]=${parm[i+1]}
    done
    return
}

parse_GET_params() {
    saveIFS=$IFS
    IFS='=&'
    parm=($QUERY_STRING)
    IFS=$saveIFS
    for ((i=0; i<${#parm[@]}; i+=2))
    do
        GET_PARAMS[${parm[i]}]=${parm[i+1]}
    done
    return
}

read_POST_vars
parse_POST_params
parse_GET_params


POST_vars_to_str() {
  local __resultvar=$1
  local q
  for param in "${!POST_PARAMS[@]}"; do
    q="${q} \"${param}\": \"${POST_PARAMS[$param]}\","
  done
  eval $__resultvar="'$q'"
}

# Load the configuration
test -e /srv/pit/pit.conf && source $_

# This query function will allow us to perform an operation, but wait for 20 seconds if the file is locked.
function query() {
  sqlite3 -init <(echo ".timeout 20000") $PIT_DB_FILE "$1" 2>/dev/null
}

# This function is used when inserting into a table, and wanting the new RowID (primary key) returned.
function query_insert() {
  echo $(query "$1; SELECT last_insert_rowid();")
}


function set_entry() {
    local NAME=$1
    local VALUE=$2
    local VVAL=$(query "SELECT Value FROM Entries WHERE Name='$NAME';")
    if [ -z "$VVAL" ]; then
            # No Setting.
            query "INSERT INTO Entries (Name, Value) VALUES ('$NAME', '$VALUE');"
    else
            query "UPDATE Entries SET Value='$VALUE' WHERE Name='$NAME';"
    fi
}

function get_setting() {
    local NAME=$1
    local VALUE=$(query "SELECT Value FROM Entries WHERE Name='$NAME';")
    echo "$VALUE"
}


# Generate a random work file.  For better management of rougue files, give it a unique starting name, and an extention.   A random number will be added to the
function work_file() {
  local fname=$1
  local fext=$2

  echo "${PIT_TMP_DIR}/$fname-${RANDOM}.${fext}"
}


function debug_out() {
  if [[ $PIT_DEBUG -gt 0 ]]; then
    echo "$1" >> $PIT_LOG_DEBUG
  fi
}


urldecode() {
    # urldecode <string>

    local url_encoded="${1//+/ }"
    printf '%b' "${url_encoded//%/\\x}"
}


function check_session() {
    local SID=$1

    # check that at least a session number was provided.
    if [[ $SID -gt 0 ]]; then

        # check that the key files exist.
        if [[ -e $PIT_DATA_DIR/sessions/$SID-client.pem && -e $PIT_DATA_DIR/sessions/$SID-server.pem ]]; then
            # check the database to see that the session is active.

            local RES=$(query "DELETE FROM Sessions WHERE datetime(Expires) < datetime('now');SELECT Expires FROM Sessions WHERE SessionID=$SID;")
            if [[ $RES -gt 0 ]]; then
                return 0;
            fi
        fi
    fi

    # if we got here, then the session is invalid.
    return 1;
}


# this function will return 0 if the session is currently active and valid.  Will return a 1 if not.
# note that we hard-code some limits on the Expire time
function update_session() {
  local SID=$1
  if [[ $PIT_SESSION_EXPIRE -lt 60 || $PIT_SESSION_EXPIRE -gt 3600 ]]; then
    PIT_SESSION_EXPIRE=600;
  fi
  local RES=$(query("DELETE FROM Sessions WHERE datetime(Expires) < datetime('now');UPDATE Sessions SET Expires=datetime('now','$PIT_SESSION_EXPIRE seconds') WHERE SessionID=$SID;SELECT Expires FROM Sessions WHERE SessionID=$SID;"))
  if [[ -z $RES ]]; then
    return 0;
  else
    return 1;
  fi
}


function unpack_session() {
    local SID=$1
    local SKEY=$2
    local SDATA=$3

    # check that the keys for this session exist.

    # so how are we going to return the data we receive?
    #  Maybe it needs to be done specifically based on the api call, rather than a generic one... because in some cases, it is an instruction, but in other cases, it is just storing a pack.
    return 0;
}




