#!/bin/bash
#
# PIT Backend API Script
# https://github.com/hyper/pit
#
# Process new session connections.
#
# CGI Framework based from https://github.com/ruudud/cgi
#

# httputils creates the associative arrays POST_PARAMS and GET_PARAMS
if [[ "$SCRIPT_FILENAME" ]]; then
  . "$(dirname $SCRIPT_FILENAME)/.pit-common"
else
  . "$(dirname $(pwd)$SCRIPT_NAME)/.pit-common"
fi




# Common headers goes here
echo "Content-Type: application/json"

# we have a new request to establish a session.  We have received the public key for the session.

## TODO - check the integrity of the private key, before we waste resources generating a new keypair.

# Create new keypair

# Create record in session table.


## TODO - the client key is encoded in safe-html... so will need to have some characters replaced.

  echo "Client Public Key:" >> /srv/pit/log/pit-debug.log
  echo ${POST_PARAMS["puk"]} >> /srv/pit/log/pit-debug.log




  # create a new sessions record in the database.
  session_id=$(query_insert "INSERT INTO Sessions (LastAccess, ExpireTime) VALUES (date('now'), 600);")
  echo "New Session: $session_id" >> /srv/pit/log/pit-debug.log


  PUKFILE=$(work_file "session-client-key" "pem");
  echo "work_file: $PUKFILE" >> /srv/pit/log/pit-debug.log

  # puk is base64, so as we are writing it to the file, we decode it.
  echo ${POST_PARAMS["puk"]} | base64 -d > $PIT_DATA_DIR/sessions/$session_id-client.pem

  # create a new privatekey pair for the session.  Obtain the public key and send it back tot he client.  we dont need to store it.


#  POST_vars_to_str result
  echo "Status: 200 OK"
  echo ""

  echo "Finished parsing POST" >> /srv/pit/log/pit-debug.log
  echo "New Session established"
  exit 0



